# Copyright (C) 2021 - present Juergen Zimmermann, Hochschule Karlsruhe
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.

# siehe app.module.ts

schema {
  query: Query
  mutation: Mutation
}

"Funktionen, um Bücherdaten zu lesen"
type Query {
  haeuser(suchkriterien: SuchkriterienInput): [Haus!]

  haus(id: ID!): Haus
}

"Funktionen, um Bücher neu anzulegen, zu aktualisieren oder zu löschen"
type Mutation {
  create(input: HausInput!): CreatePayload

  update(input: HausUpdateInput!): UpdatePayload

  delete(id: ID!): Boolean

  # Mutation, wenn z.B. der Login-Zeitpunkt im IDM-System gespeichert wird
  token(username: String!, password: String!): TokenResult
  refresh(refresh_token: String!): TokenResult
}

"Daten zur Ausstattung eines Hauses"
type Ausstattung {
  keller: Boolean
  garten: Boolean
  garage: Boolean
}

"Daten zum Bewohner eines Hauses"
type Bewohner {
  vorname: String
  nachname: String
  alter: Int
  beruf: String
  haus: Haus
}

"Datenschema zu einem Buch, das gelesen wird"
type Haus {
  # ID ist bei Apollo ein String
  id: Int!
  version: Int!
  art: String!
  stockwerk: Int!
  zimmer: Int!
  preis: Float!
  groesse: Float!
  standort: String!
  schlagwoerter: [String]
  # 1:1-Beziehung
  ausstattung: Ausstattung!
  # field mit @ResolveField
  bewohner: [Bewohner]
}

"Enum-Typ für die Art eines Buches"
enum Art {
  EINFAMILIENHAUS
  MEHRFAMILIENHAUS
  WOHNUNG
}

"Suchkriterien für Bücher"
input SuchkriterienInput {
  standort: String
  art: Art
  zimmer: Int
  preis: Float
}

"Daten zur Ausstattung eines neuen Hauses"
input AusstattungInput {
  keller: Boolean!
  garten: Boolean!
  garage: Boolean!
}

"Daten zu den Bewohnern eines Hauses"
input BewohnerInput {
  vorname: String!
  nachname: String!
  alter: Int!
  beruf: String!
}

"Daten für ein neues Haus"
input HausInput {
  art: String!
  stockwerk: Int!
  zimmer: Int!
  preis: Float!
  groesse: Float!
  standort: String!
  schlagwoerter: [String]
  ausstattung: AusstattungInput!
  bewohner: [BewohnerInput!]
}

type CreatePayload {
  id: Int
}

"Daten für ein zu änderndes Haus"
input HausUpdateInput {
  id: ID
  version: Int
  art: String
  stockwerk: Int
  zimmer: Int
  groesse: Float
  standort: String
  preis: Float
  rabatt: Float
  schlagwoerter: [String]
}

type UpdatePayload {
  version: Int
}

type TokenResult {
  access_token: String!
  expires_in: Int!
  refresh_token: String!
  refresh_expires_in: Int!
}
